# -*- coding: utf-8 -*-
"""tomato_gate.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yfhPV7nWzlKu0Y67nLN3MbjoKUTKY1ba
"""

# tomato_gate.py
import numpy as np, cv2
from PIL import Image

# --- Mask LAB: stabil ke bayangan; tangkap hijau–kuning–cokelat daun ---
def _leaf_mask_lab(img_rgb,
                   L_min=25, L_max=245,
                   a_green_max=-5, a_brown_min=12, b_yellow_min=10):
    lab = cv2.cvtColor(img_rgb, cv2.COLOR_RGB2LAB)
    L,A,B = lab[...,0], lab[...,1], lab[...,2]
    a = A.astype(np.int16) - 128
    b = B.astype(np.int16) - 128
    green  = (a <= a_green_max) & (L >= L_min) & (L <= L_max)
    yellow = (a >  a_green_max) & (a < a_brown_min) & (b >= b_yellow_min) & (L >= L_min) & (L <= L_max)
    brown  = (a >= a_brown_min) & (b >= b_yellow_min) & (L >= L_min)
    m = (green | yellow | brown).astype(np.uint8)
    m = cv2.morphologyEx(m, cv2.MORPH_OPEN,  np.ones((5,5), np.uint8))
    m = cv2.morphologyEx(m, cv2.MORPH_CLOSE, np.ones((7,7), np.uint8))
    m = cv2.dilate(m, np.ones((3,3), np.uint8), 1)
    return m

# --- (opsional) Mask HSV: longgar; bisa digabung ke union jika perlu ---
def _leaf_mask_hsv(img_rgb):
    hsv = cv2.cvtColor(img_rgb, cv2.COLOR_RGB2HSV)
    H,S,V = hsv[...,0], hsv[...,1], hsv[...,2]
    green  = (H>=35)&(H<=85)&(S>=28)&(V>=40)
    yellow = (H>=20)&(H<=34)&(S>=35)&(V>=50)
    m = np.where(green | yellow, 1, 0).astype(np.uint8)
    m = cv2.morphologyEx(m, cv2.MORPH_OPEN,  np.ones((5,5), np.uint8))
    m = cv2.morphologyEx(m, cv2.MORPH_CLOSE, np.ones((7,7), np.uint8))
    m = cv2.dilate(m, np.ones((3,3), np.uint8), 1)
    return m

def _largest_component_stats(mask01):
    num, labels = cv2.connectedComponents(mask01)
    if num <= 1: return 0.0, 0, 0.0
    best, area = 0, 0
    for lb in range(1, num):
        a = int((labels==lb).sum())
        if a > area: best, area = lb, a
    comp = (labels==best).astype(np.uint8)
    frac = comp.mean()
    cnts,_ = cv2.findContours(comp, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    if not cnts: return float(frac), int(area), 0.0
    cnt  = max(cnts, key=cv2.contourArea)
    a    = cv2.contourArea(cnt)
    hull = cv2.convexHull(cnt)
    ha   = cv2.contourArea(hull) if hull is not None else 1.0
    return float(frac), int(a), float(a/(ha+1e-6))

def tomato_gate(pil_image, mode="union",
                min_mask_frac=0.08, max_mask_frac=0.95, min_solidity=0.25):
    """
    mode: 'lab' | 'hsv' | 'union' (LAB ∪ HSV)
    return (accept:bool, info:dict{mask_frac, mask_area, solidity, reasons, mask})
    """
    rgb = np.array(pil_image.convert("RGB"))
    m_lab = _leaf_mask_lab(rgb) if mode in ("lab","union") else None
    m_hsv = _leaf_mask_hsv(rgb) if mode in ("hsv","union") else None
    if mode == "lab":   m = m_lab
    elif mode == "hsv": m = m_hsv
    else:               m = ((m_lab | m_hsv) > 0).astype(np.uint8)

    frac, area, sol = _largest_component_stats(m)
    reasons = []
    if frac < min_mask_frac: reasons.append(f"mask terlalu kecil ({frac:.2f})")
    if frac > max_mask_frac: reasons.append(f"mask terlalu besar ({frac:.2f})")
    if sol  < min_solidity:  reasons.append(f"solidity rendah ({sol:.2f})")
    return (len(reasons)==0), {"mask_frac":frac, "mask_area":area, "solidity":sol, "reasons":reasons, "mask":m}

def draw_mask_overlay(pil_image, mask01, alpha=0.45):
    rgb = np.array(pil_image.convert("RGB"))
    color = np.zeros_like(rgb); color[...,1] = 255  # hijau
    overlay = (mask01[...,None]*color) + ((1-mask01[...,None])*rgb)
    out = (alpha*overlay + (1-alpha)*rgb).astype(np.uint8)
    return Image.fromarray(out)
